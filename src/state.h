#ifndef AUV_STATE
#define AUV_STATE
#include <QImage>
#include <QString>
#include <QVariant>
#include <QTime>
#include <QMap>
#include <QReadWriteLock>
#include <QVector3D>

/**
 * \defgroup HUB	Central Data Hub
 * \defgroup Super	Supervisory High-Level Control
 * \defgroup State	State Estimator
 * \defgroup Targeting	Target Object Sensing (Vision/Sonar)
 * \defgroup Actor	Controllers (Actor)
 * \defgroup HAL	HAL - Vehicle Hardware Interface
 * \defgroup AUV	Vehicle Hardware Drivers
 */

#include "director/director.h"
#include "supervisor/supervisor.h"
#include "actor/actor.h"
#include "sal/sal.h"
#include "aal/aal.h"

/// Data from targeting system about an identified object
/// \ingroup Targeting
struct targetData {
	QReadWriteLock targetLock;
	bool found;
	int x, y;   //  position (for visual tracking)
	int distance;	    //  distance (for buoy/window/pinger)
	int angle;	    //  orientation (for path/bin)
	int heading;	    //  heading (for pinger)
};

struct target {
	QString targetID;
	enum type { VISUAL, ACOUSTIC }
	int expectedDepth;
        QColor color;
	//shape??
};

/// a value from a sensor
/// \ingroup HAL
struct sensorValue{
	QString datumID;
	QString sensorID;
	QVariant value;
	QTime timestamp;
};
/// Axes that a thruster can act upon
/// \ingroup HAL
typedef enum axes {posX,posY,posZ,posROLL,posPITCH,posYAW,negX,negY,negZ,negROLL,negPITCH,negYAW}; // does this work?

///// Sensor and camera data from the HAL
///// \ingroup HAL
struct HALdata {
	QReadWriteLock HALlock;
	// sensors
        QMap<QString, QList<sensorValue> > sensorData; // datumID, values
        QMap<QString, QMap<QString,QVariant> > sensorMeta; // sensorID, metaData

        QMap<QString, QList<axes> > thrusterMeta; // thrusterID, axesaffected
	QMap<QString, double> thrusterSpeeds; // thrusterID, speed

	QMap<QString, bool> mechs; // name, triggered state
};

/** 
 * Represents the current position and other physical properties of the vehicle.
 * The coordinate system is absolute, with 0,0,0 being the AUV start or tare point.
 * Remember that +Z is down, +Y is right, +X is forward.
 * \ingroup State
 */
struct physicalState {
	QReadWriteLock stateLock;
	enum coordinates {LOCAL, GLOBAL};
	QVector3D rotPos, rotRate, rotAcc; // roll,pitch,yaw
	QVector3D linPos, linRate, linAcc; // x,y,z
};

/// data generated by director module
/// \ingroup Super
struct directorData {
	QReadWriteLock directorLock;
	QString currentTask;
	QString currentAction;
	QString currentTarget;
	QString currentCommand;
};

/// data reported by actor module
/// \ingroup Actor
struct actorData {
	QReadWriteLock actorLock;
	double thrusters[4];
	int progressPercentage;
	enum status {done, going};
	bool finished;
};


//! Actor inputs

/// data generated by supervisor module
/// \ingroup Super
struct supervisorData {
	QReadWriteLock supervisorLock; // for supervisor
	enum status {STOPPED, RUNNING, KILLED};
	enum controlSource {DIRECTOR, RC};

	// actor input
	QString currentCMD;
	// track
	bool currentTargetLocation; // fwd or down
	Actor::targetDir targetDir;
	int approachSpeed;
	// move
        //desired XVel, YVel, Z, Yaw
        //current XVel, YVel, Z, Yaw
	

};

/**
 * Parameter Storage in State data.
 * \ingroup HUB
 */
struct parameterData {
	QReadWriteLock parameterLock;
	QMap<QString, QVariant> parameters;
};


/**
 * AUV_State is the main shared dataset for all of the modules.
 * \ingroup HUB
 */
struct AUV_State {
	/// Supervisor outputs
	struct supervisorData supervisor;

	/// Director outputs
	struct directorData director;

	/// Targeting outputs
	struct targetData targeter;

	/// State estimator outputs
	struct physicalState physState;

	/// Actor/Controllers output
	struct actorData actor;

	/// HAL outputs
	struct HALdata hardware;

	/// Main parameters storage (supplemental to Module storage, to facilitate logging and dashboard)
	struct paramterData params;

	/// Simulate or run for real?
	bool simulate;
};

/// function for serializing the state data into a portable format for logging and networking
/// \ingroup HUB
QByteArray serializeState(AUV_State* state) {
	/// What format should be used? SID? XML? CSV?
}

#endif
